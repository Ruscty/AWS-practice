AWSTemplateFormatVersion: 2010-09-09
Description: api resource APIGateway and Lambda

Parameters: 
#--------------------------------------------パラメータ--------------------------------------------
#--------------------------------------------環境変数--------------------------------------------
  WEBACLNAME:
    Type: String
    Default: WAFTEST
  LINECHANNELSECRET:
    Type: String
    Default: test
  LINECHANNELACCESSTOKEN:
    Type: String
    Default: test
#--------------------------------------------Route53パラメータ--------------------------------------------
  DomainName:
    Type: String
    Default: example.com
#--------------------------------------------SQSパラメータ--------------------------------------------
  QUEUENAME:
    Description: "add .fifo on the end"
    Type: String
    Default: sqstest.fifo
#--------------------------------------------S3パラメータ--------------------------------------------
  LOGBUCKETNAME:
    Type: String
    Default: example-log-13579
  HTMLBUCKETNAME:
    Type: String
    Default: example-html-13579
  CONFIGBUCKETNAME:
    Type: String
    Default: example-config-13579
#--------------------------------------------DynamoDBパラメータ--------------------------------------------
  TABLENAME:
    Type: String
    Default: testtable
  # READCAPACITYUNIT:
  #   Description: default 5
  #   Type: Number
  #   Default: 5
  # WRITECAPACITYUNIT:
  #   Description: default 5
  #   Type: Number
  #   Default: 5
  BACKUPPOINTINTIME:
    Description: default disable
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
#--------------------------------------------Lambdaパラメータ--------------------------------------------
  InputLambdaFunctionName:
    Type: String
    Default: inputlam
  OutputLambdaFunctionName:
    Type: String
    Default: outputlam
  LIFFLambdaFunctionName:
    Type: String
    Default: lifflam
  NotificationLambdaFunctionName:
    Type: String
    Default: notlam
  ErrorLambdaFunctionName:
    Type: String
    Default: errlam
  LogLambdaFunctionName:
    Type: String
    Default: loglam

#--------------------------------------------APIGatewayパラメータ--------------------------------------------
  MessageAPIGatewayName:
    Type: String
    Default: msgapi
  MessageAPIGatewayStageName:
    Type: String
    Default: msgapistagetest

  LIFFAPIGatewayName:
    Type: String
    Default: liffapi
  LIFFAPIGatewayStageName:
    Type: String
    Default: liffapistagetest

  ApiEndpoint:
    Type: String
    AllowedValues:
      - REGIONAL
      - EDGE
      - PRIVATE
    Default: REGIONAL
  
  ApiValidate:
    Type: String
    Default: x-line-signature
#--------------------------------------------IAMパラメータ--------------------------------------------
  configrolename:
    Type: String
    Default: configrolenametest
  logcreaterolepolicyname:
    Type: String
    Default: logcreaterolepolicy

  inputrolename:
    Type: String
    Default: inputrole
  inputrolepolicyname:
    Type: String
    Default: inputrolepolicy

  outputrolename:
    Type: String
    Default: outputrole
  outputrolepolicyname:
    Type: String
    Default: outputrolepolicy

  liffrolename:
    Type: String
    Default: liffrole
  liffrolepolicyname:
    Type: String
    Default: liffrolepolicy

  notificationrolename:
    Type: String
    Default: notificationrole

  errorrolename:
    Type: String
    Default: errorrole

  logrolename:
    Type: String
    Default: logrole

  logrolepolicyname:
    Type: String
    Default: logrolepolicy

#--------------------------------------------SNSパラメータ--------------------------------------------
  snstopicname:
    Type: String
    Default: ErrorTopic
  snssubscriptionemail:
    Type: String
    Default: XXXX@XXXX.com
  

#--------------------------------------------パラメータのソート--------------------------------------------
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Route53 Configuration"
        Parameters:
          - DomainName
      -
        Label:
          default: "SQS Configuration"
        Parameters:
          - QUEUENAME
      -
        Label:
          default: "S3 Configuration"
        Parameters:
          - CONFIGBUCKETNAME
          - LOGBUCKETNAME
          - HTMLBUCKETNAME
      -
        Label:
          default: "Dynamodb Configuration"
        Parameters:
          - TABLENAME
          # - READCAPACITYUNIT
          # - WRITECAPACITYUNIT
          - BACKUPPOINTINTIME
      -
        Label:
          default: "IAM Configuration"
        Parameters:
          - logcreaterolepolicyname
          - inputrolename
          - inputrolepolicyname
          - outputrolename
          - outputrolepolicyname
          - liffrolename
          - liffrolepolicyname
          - notificationrolename
          - errorrolename
          - logrolename
          - logrolepolicyname
      -
        Label:
          default: "API Configuration"
        Parameters:
          - WEBACLNAME
          - LINECHANNELSECRET
          - LINECHANNELACCESSTOKEN
          - InputLambdaFunctionName
          - OutputLambdaFunctionName
          - LIFFLambdaFunctionName
          - NotificationLambdaFunctionName
          - ErrorLambdaFunctionName
          - LogLambdaFunctionName
          - MessageAPIGatewayName
          - MessageAPIGatewayStageName
          - LIFFAPIGatewayName
          - LIFFAPIGatewayStageName
          - ApiEndpoint
          - ApiValidate
      -
        Label:
          default: "SNS Configuration"
        Parameters:
          - snstopicname

#--------------------------------------------リソース--------------------------------------------
Resources: 
  hostedzoneID:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig: 
        Comment: 'My hosted zone for example.com'
      Name: !Ref DomainName
#--------------------------------------------WAF--------------------------------------------
  wafwebaclID:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Block: {}
      Name: !Ref WEBACLNAME
      Rules:
        # ルール1
        - Name: AWSManagedRulesAdminProtectionRule
          Priority: 0
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesAdminProtectionRuleMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAdminProtectionRuleSet
              # ExcludedRules: []
        # ルール2
        - Name: AWSManagedRulesCommonRule
          Priority: 1
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSetMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              # ExcludedRules: []
        # ルール3
        - Name: AWSManagedRulesKnownBadInputsRule
          Priority: 2
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesKnownBadInputsRuleMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
              # ExcludedRules: []
        # ルール4
        - Name: AWSManagedRulesSQLiRule
          Priority: 3
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesSQLiRuleMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
              # ExcludedRules: []
        # ルール5
        - Name: LINERule
          Priority: 4
          Action:
              Count: {}
          VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: LINERuleMetrics
          Statement:
              OrStatement:
                  Statements:
                      -
                          ByteMatchStatement:
                              FieldToMatch: {SingleHeader: {Name: user-agent}}
                              PositionalConstraint: CONTAINS
                              SearchString: LineBotWebhook
                              TextTransformations: [{Type: NONE, Priority: 0}]
                      -
                          ByteMatchStatement:
                              FieldToMatch: {SingleHeader: {Name: user-agent}}
                              PositionalConstraint: CONTAINS
                              SearchString: LIFF
                              TextTransformations: [{Type: NONE, Priority: 0}]

      Scope: REGIONAL
      Tags:
        - Key: management
          Value: dev
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: WAFWebAclMetric


  messagewafwebaclassociationID:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${messageapigatewayID}/stages/${MessageAPIGatewayStageName}
      WebACLArn: !GetAtt wafwebaclID.Arn

  liffwafwebaclassociationID:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${liffapigatewayID}/stages/${LIFFAPIGatewayStageName}
      WebACLArn: !GetAtt wafwebaclID.Arn
#--------------------------------------------IAMポリシーLambda共通--------------------------------------------                              
  #IAMポリシーlambda共通(log作成用)
  logcreatepolicyID:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref logcreaterolepolicyname
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda:*

#--------------------------------------------SQS--------------------------------------------
  sqsID:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Ref QUEUENAME
      Tags:
        - Key: management
          Value: dev
#--------------------------------------------S3--------------------------------------------
  #HTML画像用S3
  htmlbucketID:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Ref HTMLBUCKETNAME
      MetricsConfigurations:
        - Id: !Sub ${HTMLBUCKETNAME}-metricsfilter
      Tags:
        - Key: management
          Value: dev
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  #ログ用S3
  logbucketID:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Ref LOGBUCKETNAME
      MetricsConfigurations:
        - Id: !Sub ${LOGBUCKETNAME}-metricsfilter
      LifecycleConfiguration:
        Rules: 
        - ExpirationInDays: 31
          Transitions:
            - TransitionInDays: 30
              StorageClass: GLACIER
          Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # LoggingConfiguration:
      #   LoggingConfiguration
      # MetricsConfigurations:
      #   - MetricsConfiguration
      # NotificationConfiguration:
      #   NotificationConfiguration
      Tags:
        - Key: management
          Value: dev
      VersioningConfiguration:
        Status: Enabled

  #Config用
  configbucketID:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !Ref CONFIGBUCKETNAME
      MetricsConfigurations:
        - Id: !Sub ${CONFIGBUCKETNAME}-metricsfilter
      Tags:
        - Key: management
          Value: dev
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  configbucketpolicyID:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CONFIGBUCKETNAME
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
            -
                Sid: AWSConfigBucketPermissionsCheck
                Effect: Allow
                Principal:
                    Service:
                        - config.amazonaws.com
                Action: 's3:GetBucketAcl'
                Resource: !Sub arn:aws:s3:::${CONFIGBUCKETNAME}
            -
                Sid: AWSConfigBucketExistenceCheck
                Effect: Allow
                Principal:
                    Service:
                        - config.amazonaws.com
                Action: 's3:ListBucket'
                Resource: !Sub arn:aws:s3:::${CONFIGBUCKETNAME}
            -
                Sid: AWSConfigBucketDelivery
                Effect: Allow
                Principal:
                    Service:
                        - config.amazonaws.com
                Action: 's3:PutObject'
                Resource: !Sub arn:aws:s3:::${CONFIGBUCKETNAME}/AWSLogs/${AWS::AccountId}/Config/*
                Condition:
                    StringEquals:
                        's3:x-amz-acl': bucket-owner-full-control
    DependsOn:
      - configbucketID

#--------------------------------------------DynamoDB--------------------------------------------
  dynamodbtableID:
    Type: AWS::DynamoDB::Table
    Properties:
      # テーブルとインデックスのキースキーマを記述する属性
      AttributeDefinitions:
        -
          AttributeName: "userId"
          AttributeType: "S"
      # パーティションキー、ソートキーの指定
      KeySchema:
        -
          AttributeName: "userId"
          KeyType: "HASH"
      # BillingMode: PROVISIONED
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !Ref BACKUPPOINTINTIME
      # ProvisionedThroughput:
      #   ReadCapacityUnits: !Ref READCAPACITYUNIT
      #   WriteCapacityUnits: !Ref WRITECAPACITYUNIT

      TableName: !Ref TABLENAME
      Tags:
        - Key: management
          Value: dev
#--------------------------------------------APIGateway1--------------------------------------------
  #APIGateway
  messageapigatewayID:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types: 
          - !Ref ApiEndpoint
      Name: !Ref MessageAPIGatewayName
      Tags:
        - Key: management
          Value: dev
  #APIGatewayリソース
  messageapigatewayresourceID:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref messageapigatewayID
      ParentId: !GetAtt messageapigatewayID.RootResourceId
      PathPart: !Ref InputLambdaFunctionName

  # APIGatewayリクエスト検証
  inputapivalidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      Name: !Ref ApiValidate
      RestApiId: !Ref messageapigatewayID
      ValidateRequestParameters: true

  #APIGatewayメソッド
  messageapigatewaymethodID:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref messageapigatewayID
      ResourceId: !Ref messageapigatewayresourceID
      RequestValidatorId: !Ref inputapivalidator
      AuthorizationType: None
      HttpMethod: POST
      RequestParameters:
        method.request.header.x-line-signature: true
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        # RequestParameters: 
        #   integration.request.header.x-line-signature: method.request.header.x-line-signature
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${InputLambdaFunctionName}/invocations"

  #クライアント証明書
  inputClientCertificateID:
    Type: 'AWS::ApiGateway::ClientCertificate'
    Properties:
      Description: A client certificate

  messageapigatewaystageID:
    Type: AWS::ApiGateway::Stage
    Properties:
      ClientCertificateId: !Ref inputClientCertificateID
      DeploymentId: !Ref messageapigatewaydeployID
      RestApiId: !Ref messageapigatewayID
      # StageName: !Ref MessageAPIGatewayStageName
      Tags:
        - Key: management
          Value: dev
    DependsOn:
      - messageapigatewaymethodID

  #デプロイ
  messageapigatewaydeployID:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref messageapigatewayID
      StageDescription:
        MetricsEnabled: true
      StageName: !Ref MessageAPIGatewayStageName
    DependsOn:
      - messageapigatewaymethodID


#--------------------------------------------Lambda1--------------------------------------------
  #IAMポリシー
  inputlambdapolicyID:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref inputrolepolicyname
      PolicyDocument:         
        Version: 2012-10-17
        Statement: 
          - Action: sqs:*
            Effect: Allow
            Resource: !GetAtt sqsID.Arn
  #IAMロール
  inputlambdaroleID:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref inputlambdapolicyID
        - !Ref logcreatepolicyID
      RoleName: !Ref inputrolename
      Tags:
        - Key: management
          Value: dev

  #lambda本体
  inputlambdaID:
    Type: AWS::Lambda::Function
    Properties:
      Description: input message
      FunctionName: !Ref InputLambdaFunctionName
      Handler: input.handler
      MemorySize: 128
      Role: !GetAtt inputlambdaroleID.Arn
      Runtime: nodejs14.x

      #環境変数の設定
      Environment:
        Variables:
          LINE_CHANNEL_SECRET: !Ref LINECHANNELSECRET
          LINE_CHANNEL_ACCESS_TOKEN: !Ref LINECHANNELACCESSTOKEN
          QUEUE_URL: !Ref sqsID
      Code:
        S3Bucket: XXXX-bucket
        S3Key: XXXX/XXXX.zip

      Tags:
        - Key: management
          Value: dev

  #APIGatewayのLambda関数呼び出し許可
  inputlambdapermissionID:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref InputLambdaFunctionName
      Principal: "apigateway.amazonaws.com"
    DependsOn: inputlambdaID

  inputlambdaloggroupID:
    Type: AWS::Logs::LogGroup
    Properties:
      # KmsKeyId: String
      LogGroupName: !Sub /aws/lambda/${InputLambdaFunctionName}
      RetentionInDays: 7

#--------------------------------------------Lambda2--------------------------------------------
  #IAMポリシー
  outputlambdapolicyID:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref outputrolepolicyname
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Action: dynamodb:*
            Effect: Allow
            Resource: !GetAtt dynamodbtableID.Arn
  #IAMロール
  outputlambdaroleID:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - !Ref outputlambdapolicyID
        - !Ref logcreatepolicyID
      RoleName: !Ref outputrolename
      Tags:
        - Key: management
          Value: dev
  #lambda本体
  outputlambdaID:
    Type: AWS::Lambda::Function
    Properties:
      Description: output message
      FunctionName: !Ref OutputLambdaFunctionName
      Handler: output.handler
      MemorySize: 128
      Role: !GetAtt outputlambdaroleID.Arn
      Runtime: nodejs14.x


      #環境変数の設定
      Environment:
        Variables:
          LINE_CHANNEL_SECRET: !Ref LINECHANNELSECRET
          LINE_CHANNEL_ACCESS_TOKEN: !Ref LINECHANNELACCESSTOKEN
          QUEUE_URL: !Ref sqsID
      Code:
        S3Bucket: XXXX-bucket
        S3Key: XXXX/XXXX.zip
      Tags:
        - Key: management
          Value: dev
  #SQSのトリガーを設定
  sqstriggerID:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt sqsID.Arn
      FunctionName: !Ref OutputLambdaFunctionName
    DependsOn:
      - outputlambdaID
  outputlambdaloggroupID:
    Type: AWS::Logs::LogGroup
    Properties:
      # KmsKeyId: String
      LogGroupName: !Sub /aws/lambda/${OutputLambdaFunctionName}
      RetentionInDays: 7

#--------------------------------------------APIGateway2--------------------------------------------
  #APIGateway
  liffapigatewayID:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types: 
          - !Ref ApiEndpoint
      Name: !Ref LIFFAPIGatewayName
      Tags:
        - Key: management
          Value: dev
  #APIGatewayリソース
  liffapigatewayresourceID:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref liffapigatewayID
      ParentId: !GetAtt liffapigatewayID.RootResourceId
      PathPart: !Ref LIFFLambdaFunctionName

  # APIGatewayリクエスト検証
  # liffapivalidator:
  #   Type: AWS::ApiGateway::RequestValidator
  #   Properties: 
  #     Name: !Ref ApiValidate
  #     RestApiId: !Ref liffapigatewayID
  #     ValidateRequestParameters: true

  #APIGatewayメソッド
  liffapigatewaymethodID:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref liffapigatewayID
      ResourceId: !Ref liffapigatewayresourceID
      # RequestValidatorId: !Ref liffapivalidator
      AuthorizationType: None
      HttpMethod: GET
      RequestParameters:
        method.request.header.x-line-signature: true
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: GET
        # RequestParameters: 
        #   integration.request.header.x-line-signature: method.request.header.x-line-signature
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LIFFLambdaFunctionName}/invocations"

  #クライアント証明書
  liffClientCertificateID:
    Type: 'AWS::ApiGateway::ClientCertificate'
    Properties:
      Description: A client certificate

  liffapigatewaystageID:
    Type: AWS::ApiGateway::Stage
    Properties:
      ClientCertificateId: !Ref liffClientCertificateID
      DeploymentId: !Ref liffapigatewaydeployID
      RestApiId: !Ref liffapigatewayID
      # StageName: !Ref LIFFAPIGatewayStageName
      Tags:
        - Key: management
          Value: dev
    DependsOn:
      - liffapigatewaymethodID

  #デプロイ
  liffapigatewaydeployID:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref liffapigatewayID
      StageDescription:
        MetricsEnabled: true
      StageName: !Ref LIFFAPIGatewayStageName
    DependsOn:
      - liffapigatewaymethodID


#--------------------------------------------Lambda3--------------------------------------------
  #IAMポリシー
  lifflambdapolicyID:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref liffrolepolicyname
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeContributorInsights
              - dynamodb:Scan
              - dynamodb:ListTagsOfResource
              - dynamodb:Query
              - dynamodb:DescribeStream
              - dynamodb:DescribeTimeToLive
              - dynamodb:ListStreams
              - dynamodb:DescribeGlobalTableSettings
              - dynamodb:DescribeReservedCapacityOfferings
              - dynamodb:PartiQLSelect
              - dynamodb:DescribeTable
              - dynamodb:GetShardIterator
              - dynamodb:DescribeGlobalTable
              - dynamodb:DescribeReservedCapacity
              - dynamodb:GetItem
              - dynamodb:DescribeContinuousBackups
              - dynamodb:DescribeExport
              - dynamodb:DescribeKinesisStreamingDestination
              - dynamodb:DescribeBackup
              - dynamodb:DescribeLimits
              - dynamodb:GetRecords
              - dynamodb:DescribeTableReplicaAutoScaling
            Resource: !GetAtt dynamodbtableID.Arn
          - Effect: Allow
            Action:
              - s3:GetAccessPoint
              - s3:GetLifecycleConfiguration
              - s3:GetBucketTagging
              - s3:GetInventoryConfiguration
              - s3:GetObjectVersionTagging
              - s3:GetBucketLogging
              - s3:GetAccelerateConfiguration
              - s3:GetBucketPolicy
              - s3:GetStorageLensConfigurationTagging
              - s3:GetObjectVersionTorrent
              - s3:GetObjectAcl
              - s3:GetEncryptionConfiguration
              - s3:GetBucketObjectLockConfiguration
              - s3:GetIntelligentTieringConfiguration
              - s3:GetBucketRequestPayment
              - s3:GetAccessPointPolicyStatus
              - s3:GetObjectVersionAcl
              - s3:GetObjectTagging
              - s3:GetMetricsConfiguration
              - s3:GetBucketOwnershipControls
              - s3:GetBucketPublicAccessBlock
              - s3:GetBucketPolicyStatus
              - s3:GetObjectRetention
              - s3:GetBucketWebsite
              - s3:GetJobTagging
              - s3:ListAccessPoints
              - s3:GetBucketVersioning
              - s3:GetBucketAcl
              - s3:GetObjectLegalHold
              - s3:GetBucketNotification
              - s3:GetReplicationConfiguration
              - s3:GetObject
              - s3:GetStorageLensConfiguration
              - s3:GetObjectTorrent
              - s3:GetAccountPublicAccessBlock
              - s3:DescribeJob
              - s3:GetBucketCORS
              - s3:GetAnalyticsConfiguration
              - s3:GetObjectVersionForReplication
              - s3:GetBucketLocation
              - s3:GetAccessPointPolicy
              - s3:GetObjectVersion
              - s3:GetStorageLensDashboard
            Resource: !GetAtt htmlbucketID.Arn

  #IAMロール
  lifflambdaroleID:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref lifflambdapolicyID
        - !Ref logcreatepolicyID
      RoleName: !Ref liffrolename
      Tags:
        - Key: management
          Value: dev

  #lambda本体
  lifflambdaID:
    Type: AWS::Lambda::Function
    Properties:
      Description: liff
      FunctionName: !Ref LIFFLambdaFunctionName
      Handler: liff.handler
      MemorySize: 128
      Role: !GetAtt lifflambdaroleID.Arn
      Runtime: nodejs14.x

      #環境変数の設定
      Environment:
        Variables:
          LINE_CHANNEL_SECRET: !Ref LINECHANNELSECRET
      Code:
        S3Bucket: XXXX-bucket
        S3Key: XXXX/XXXX.zip

      Tags:
        - Key: management
          Value: dev

  #APIGatewayのLambda関数呼び出し許可
  lifflambdapermissionID:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LIFFLambdaFunctionName
      Principal: "apigateway.amazonaws.com"
    DependsOn: lifflambdaID

  lifflambdaloggroupID:
    Type: AWS::Logs::LogGroup
    Properties:
      # KmsKeyId: String
      LogGroupName: !Sub /aws/lambda/${LIFFLambdaFunctionName}
      RetentionInDays: 7

#--------------------------------------------Lambda4--------------------------------------------
  #IAMロール
  notificationlambdaroleID:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - !Ref logcreatepolicyID
      RoleName: !Ref notificationrolename
      Tags:
        - Key: management
          Value: dev

  #lambda本体
  notificationlambdaID:
    Type: AWS::Lambda::Function
    Properties:
      Description: notification
      FunctionName: !Ref NotificationLambdaFunctionName
      Handler: notification.handler
      MemorySize: 128
      Role: !GetAtt notificationlambdaroleID.Arn
      Runtime: nodejs14.x
      Code:
        S3Bucket: XXXX-bucket
        S3Key: XXXX/XXXX.zip
      Tags:
        - Key: management
          Value: dev

  ScheduledRuleID: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 13 * * ? *)" #毎日10時
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            !GetAtt notificationlambdaID.Arn
          Id: "EventScheduleID"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref notificationlambdaID
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        !GetAtt ScheduledRuleID.Arn

  notificationlambdaloggroupID:
    Type: AWS::Logs::LogGroup
    Properties:
      # KmsKeyId: String
      LogGroupName: !Sub /aws/lambda/${NotificationLambdaFunctionName}
      RetentionInDays: 7

#--------------------------------------------Lambda6(error用)--------------------------------------------
  # #IAMロール
  # errorlambdaroleID:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument: 
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #             - lambda.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonSNSFullAccess
  #       - !Ref logcreatepolicyID
  #     RoleName: !Ref errorrolename
  #     Tags:
  #       - Key: management
  #         Value: dev

  # #lambda本体
  # errorlambdaID:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Description: error function
  #     FunctionName: !Ref ErrorLambdaFunctionName
  #     Handler: error.handler
  #     MemorySize: 128
  #     Role: !GetAtt errorlambdaroleID.Arn
  #     Runtime: nodejs14.x
  #     Code:
  #       S3Bucket: XXXX-bucket
  #       S3Key: XXXX/XXXX.zip
  #     Tags:
  #       - Key: management
  #         Value: dev

  # lifflambdaloggroupID:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     # KmsKeyId: String
  #     LogGroupName: !Sub /aws/lambda/${ErrorLambdaFunctionName}
  #     RetentionInDays: 7

#--------------------------------------------Lambda5--------------------------------------------
  #IAMポリシー
  loglambdapolicyID:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref logrolepolicyname
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Action: s3:*
            Effect: Allow
            Resource: !GetAtt logbucketID.Arn
  #IAMロール
  loglambdaroleID:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref loglambdapolicyID
        - !Ref logcreatepolicyID
      RoleName: !Ref logrolename
      Tags:
        - Key: management
          Value: dev
  #lambda本体
  loglambdaID:
    Type: AWS::Lambda::Function
    Properties:
      Description: put log function
      FunctionName: !Ref LogLambdaFunctionName
      Handler: log.handler
      MemorySize: 128
      Role: !GetAtt loglambdaroleID.Arn
      Runtime: nodejs14.x
      Code:
        S3Bucket: XXXX-bucket
        S3Key: XXXX/XXXX.zip
      Tags:
        - Key: management
          Value: dev

  lifflambdaloggroupID:
    Type: AWS::Logs::LogGroup
    Properties:
      # KmsKeyId: String
      LogGroupName: !Sub /aws/lambda/${LogLambdaFunctionName}
      RetentionInDays: 7
#--------------------------------------------cloudwatch(Alarm)--------------------------------------------
# ------------------------------------------------------APIGateway(alarm)-----------------------------------------------------
  AlarmMessageApi5XXError:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: MessageApi5XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName #API名
          Value: !Ref MessageAPIGatewayName
        - Name: Stage #ステージ名
          Value: !Ref MessageAPIGatewayStageName
      MetricName: 5XXError
      ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
      Period: 60  # 期間[s]
      EvaluationPeriods: 1  # 閾値を超えた回数
      Statistic: Maximum  # 最大
      Threshold: 1  # 閾値
      AlarmActions:
        - !Ref SNSTopicErrorID  # アラーム発生時のアクション

  AlarmMessageApi4XXError:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: MessageApi4XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName #API名
          Value: !Ref MessageAPIGatewayName
        - Name: Stage #ステージ名
          Value: !Ref MessageAPIGatewayStageName
      MetricName: 4XXError
      ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
      Period: 60  # 期間[s]
      EvaluationPeriods: 1  # 閾値を超えた回数
      Statistic: Maximum  # 最大
      Threshold: 1  # 閾値
      AlarmActions:
        - !Ref SNSTopicErrorID  # アラーム発生時のアクション

  AlarmLiffApi5XXError:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: LiffApi5XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName #API名
          Value: !Ref LIFFAPIGatewayName
        - Name: Stage #ステージ名
          Value: !Ref LIFFAPIGatewayStageName
      MetricName: 5XXError
      ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
      Period: 60  # 期間[s]
      EvaluationPeriods: 1  # 閾値を超えた回数
      Statistic: Maximum  # 最大
      Threshold: 1  # 閾値
      AlarmActions:
        - !Ref SNSTopicErrorID  # アラーム発生時のアクション

  AlarmliffApi4XXError:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: LiffApi4XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName #API名
          Value: !Ref LIFFAPIGatewayName
        - Name: Stage #ステージ名
          Value: !Ref LIFFAPIGatewayStageName
      MetricName: 4XXError
      ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
      Period: 60  # 期間[s]
      EvaluationPeriods: 1  # 閾値を超えた回数
      Statistic: Maximum  # 最大
      Threshold: 1  # 閾値
      AlarmActions:
        - !Ref SNSTopicErrorID  # アラーム発生時のアクション
  # レイテンシー
  # AlarmMessageLatencyError:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: LatencyError
  #     Namespace: AWS/ApiGateway
  #     Dimensions:
  #       - Name: ApiName #API名
  #         Value: input-API 
  #       - Name: Stage #ステージ名
  #         Value: default
  #     MetricName: Latency
  #     ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
  #     Period: 60  # 期間[s]
  #     EvaluationPeriods: 1  # 閾値を超えた回数
  #     Statistic: Maximum  # 最大
  #     Threshold: 1  # 閾値
  #     AlarmActions:
  #       - !Ref SNSTopicErrorID  # アラーム発生時のアクション
# ------------------------------------------------------DynamoDB(alarm)-----------------------------------------------------
  DynamoDBGSISystemErrorAlarmID:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: 'DynamoDBGSISystemErrorAlarm'
      AlarmDescription: 'Alarm when GSI System Error exceed 2% of total number of read requests'
      AlarmActions:
        - !Ref SNSTopicErrorID
      Metrics:
        - Id: e1
          Expression: 'm1/(m2+m3) * 100'
          Label: GSISystemError
        - Id: m1
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              MetricName: SystemErrors
              Dimensions:
                - Name: TableName
                  Value: !Ref TABLENAME
            Period: 60
            Stat: 'SampleCount'
            Unit: 'Count'
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              MetricName: ConsumedReadCapacityUnits
              Dimensions:
                - Name: TableName
                  Value: !Ref TABLENAME
            Period: 60
            Stat: SampleCount
            Unit: Count
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              MetricName: ConsumedWriteCapacityUnits
              Dimensions:
                - Name: TableName
                  Value: !Ref TABLENAME
            Period: 60
            Stat: SampleCount
            Unit: Count
          ReturnData: False
      EvaluationPeriods: 2
      Threshold: 2.0
      ComparisonOperator: GreaterThanThreshold


  DynamoDBGSIUserErrorAlarmID:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: 'DynamoDBGSIUserErrorAlarm'
      AlarmDescription: 'Alarm when GSI User Error exceed 2% of total number of read requests'
      AlarmActions:
        - !Ref SNSTopicErrorID
      Metrics:
        - Id: e1
          Expression: 'm1/(m2+m3) * 100'
          Label: GSISystemError
        - Id: m1
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              MetricName: UserErrors
              Dimensions:
                - Name: TableName
                  Value: !Ref TABLENAME
            Period: 60
            Stat: 'SampleCount'
            Unit: 'Count'
          ReturnData: False
        - Id: m2
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              MetricName: ConsumedReadCapacityUnits
              Dimensions:
                - Name: TableName
                  Value: !Ref TABLENAME
            Period: 60
            Stat: SampleCount
            Unit: Count
          ReturnData: False
        - Id: m3
          MetricStat:
            Metric:
              Namespace: AWS/DynamoDB
              MetricName: ConsumedWriteCapacityUnits
              Dimensions:
                - Name: TableName
                  Value: !Ref TABLENAME
            Period: 60
            Stat: SampleCount
            Unit: Count
          ReturnData: False
      EvaluationPeriods: 2
      Threshold: 2.0
      ComparisonOperator: GreaterThanThreshold
# ------------------------------------------------------S3(alarm)-----------------------------------------------------
  S34XXErrorsID:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: S3 4xxErrors
      Namespace: AWS/S3
      Dimensions:
        - Name: BucketName #バケット名
          Value: !Ref HTMLBUCKETNAME
        - Name:  FilterId #フィルター
          Value: !Sub ${HTMLBUCKETNAME}-metricsfilter
      MetricName: 4xxErrors
      ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
      Period: 60  # 期間[s]
      EvaluationPeriods: 1  # 閾値を超えた回数
      Statistic: Maximum  # 最大
      Threshold: 1  # 閾値
      AlarmActions:
        - !Ref SNSTopicErrorID  # アラーム発生時のアクション

  S35XXErrorsID:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: S3 5xxErrors
      Namespace: AWS/S3
      Dimensions:
        - Name: BucketName #バケット名
          Value: !Ref HTMLBUCKETNAME
        - Name:  FilterId #フィルター
          Value: !Sub ${LOGBUCKETNAME}-metricsfilter
      MetricName: 5xxErrors
      ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
      Period: 60  # 期間[s]
      EvaluationPeriods: 1  # 閾値を超えた回数
      Statistic: Maximum  # 最大
      Threshold: 1  # 閾値
      AlarmActions:
        - !Ref SNSTopicErrorID  # アラーム発生時のアクション

# ------------------------------------------------------SQS(alarm)-----------------------------------------------------
  AlarmSQSError:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: SQSError
      Namespace: AWS/SQS
      Dimensions:
        - Name: QueueName #API名
          Value: !Ref QUEUENAME
      MetricName: ApproximateAgeOfOldestMessage
      ComparisonOperator: GreaterThanOrEqualToThreshold  # 閾値以上
      Period: 60  # 期間[s]
      EvaluationPeriods: 1  # 閾値を超えた回数
      Statistic: Maximum  # 最大
      Threshold: 30  # 閾値
      AlarmActions:
        - !Ref SNSTopicErrorID  # アラーム発生時のアクション

#--------------------------------------------SNS--------------------------------------------
  SNSTopicErrorID:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Error notification
      # KmsMasterKeyId: String
      # Subscription:
      #   - Endpoint: XXXX@XXXX.com
      #     Protocol: email
      Tags:
        - Key: management
          Value: dev
      TopicName: ErrorTopic

  snssubscriptionID:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref snssubscriptionemail
      Protocol: email
      TopicArn: !Ref SNSTopicErrorID

#--------------------------------------------Config(本番稼働させる)--------------------------------------------
  #IAMロール
  configroleID:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - config.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      RoleName: !Ref configrolename
      Tags:
        - Key: management
          Value: dev

  ConfigrecorderID:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: String
      RecordingGroup:
        ResourceTypes: 
          - AWS::EC2::Volume
          - AWS::ApiGateway::RestApi
          - AWS::ApiGateway::Stage
          - AWS::CloudWatch::Alarm
          - AWS::DynamoDB::Table
          - AWS::SNS::Topic
          - AWS::SQS::Queue
          - AWS::S3::Bucket
          - AWS::S3::AccountPublicAccessBlock
          - AWS::ACM::Certificate
          - AWS::CloudFormation::Stack
          - AWS::CloudTrail::Trail
          - AWS::IAM::Role
          - AWS::IAM::Policy
          - AWS::KMS::Key
          - AWS::Lambda::Function
          - AWS::WAFv2::WebACL
      RoleARN: !GetAtt configroleID.Arn

  ConfigdeliveryID:
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: "TwentyFour_Hours"
      S3BucketName: !Ref CONFIGBUCKETNAME
      # SnsTopicARN: String #必要に応じて設定

